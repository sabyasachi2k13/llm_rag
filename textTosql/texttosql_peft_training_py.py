# -*- coding: utf-8 -*-
"""textTosql_peft_training.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18VMp2gm5EvXPHoGHOD_oNBR-BSrh90Kj
"""

!pip install datasets transformers scikit-learn

from transformers import AutoTokenizer
from sklearn.metrics import precision_score, recall_score, f1_score
import sys
import numpy as np

sys.path.append('/content')

import numpy as np
from transformers import (
    AutoTokenizer,
    AutoModelForSeq2SeqLM,
    TrainingArguments,
    Trainer
)
from datasets import load_dataset
import numpy as np
import os
from peft import LoraConfig, PeftModel  # Import LoraConfig from peft

from google.colab import drive
drive.mount('/content/drive')

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"


# Load model & tokenizer
model_name = "Salesforce/codet5-base"
tokenizer = AutoTokenizer.from_pretrained(model_name)
base_model = AutoModelForSeq2SeqLM.from_pretrained(model_name)

# Define LoRA configuration
lora_config = LoraConfig(
    r=8,  # Rank of the LoRA update matrices
    lora_alpha=32,  # Scaling factor for the LoRA updates
    #target_modules=["q_proj", "k_proj", "v_proj"],  # Specific target modules for DeepSeek LLM
    lora_dropout=0.05,  # Dropout probability for the LoRA layers
    bias="none",  # No bias for the LoRA layers
)


# Apply LoRA
# The model is already quantized during loading using bnb_config, and compute dtype is set to bfloat16.)
from peft import get_peft_model # Import get_peft_model
model = get_peft_model(base_model, lora_config) # Use get_peft_model to add LoRA to the model

# Load dataset
dataset = load_dataset("spider")

from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score


def compute_met(eval_pred):
    predictions, labels = eval_pred

    if isinstance(predictions, tuple):  # handle (logits, ...)
        predictions = predictions[0]

    pred_ids = predictions.argmax(-1)
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)

    decoded_preds = tokenizer.batch_decode(pred_ids, skip_special_tokens=True)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    # Convert exact string match to binary labels
    true_binary = []
    pred_binary = []
    y_true = []
    y_pred = []

    for pred, label in zip(decoded_preds, decoded_labels):
         # For classification, mark each label token as 1
        # and prediction token as 1 if it's in label, else 0
        pred_tokens = tokenizer.encode(pred.lower())
        label_tokens = tokenizer.encode(label.lower())
        for token in label_tokens:
            y_true.append(1)
            y_pred.append(1 if token in pred_tokens else 0)

        # Also penalize extra tokens in prediction (false positives)
        for token in pred_tokens:
            if token not in label_tokens:
                y_true.append(0)
                y_pred.append(1)

    return {
        "precision": precision_score(y_true, y_pred, zero_division=0),
        "recall": recall_score(y_true, y_pred, zero_division=0),
        "f1": f1_score(y_true, y_pred, zero_division=0),
    }


# Preprocessing
def preprocess_function(examples):
    inputs = [f"translate question to SQL: {q}" for q in examples["question"]]
    targets = examples["query"]
    model_inputs = tokenizer(inputs, truncation=True, padding="max_length", max_length=256)

    with tokenizer.as_target_tokenizer():
        labels = tokenizer(targets, max_length=256, truncation=True, padding="max_length")
    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

tokenized_data = dataset.map(preprocess_function, batched=True)

print('tokenized_data',tokenized_data)
model_dir = "/content/drive/MyDrive/model"

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",
    per_device_train_batch_size=1,
    per_device_eval_batch_size=1,
    learning_rate=5e-5,
    num_train_epochs=3,
    weight_decay=0.01,
    eval_strategy="epoch",
    save_strategy="epoch",
    logging_steps=1,
    fp16=True,  # Disabled to reduce fragmentation
    gradient_accumulation_steps=1,  # Simulates a larger batch size
    label_names=["labels"],  # Explicitly set label_names if needed
)

train_sample = tokenized_data["train"].shuffle(seed=42).select(range(2000))
val_sample = tokenized_data["validation"].shuffle(seed=42).select(range(200))

# Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_sample,
    eval_dataset=val_sample,
    compute_metrics=compute_met  # Optional if you want metrics
)

# Train and evaluate
trainer.train()
trainer.evaluate()
trainer.save_model(model_dir)  # Save to Google Drive