# -*- coding: utf-8 -*-
"""sql_func.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PjaqeZChkccnHZTCUC4Y00PqG8Crb1Re
"""

import sqlite3
sys.path.append('/content')

def test_database(sql:str):
      # Connect to an in-memory database (or use 'yourfile.db')
      #conn = sqlite3.connect(':memory:')
      conn = sqlite3.connect("file::memory:?cache=shared")

      cursor = conn.cursor()
      cursor.execute(sql)
      result = cursor.fetchall()
      return result

def populate_database():
      # Connect to an in-memory database (or use 'yourfile.db')
      conn = sqlite3.connect(':memory:')
      cursor = conn.cursor()

      # -- 1. Create Tables --

      cursor.execute('''
      CREATE TABLE Customers (
          CustomerID INTEGER PRIMARY KEY,
          CustomerName TEXT NOT NULL,
          ContactName TEXT,
          Country TEXT
      );
      ''')

      cursor.execute('''
      CREATE TABLE Orders (
          OrderID INTEGER PRIMARY KEY,
          CustomerID INTEGER,
          OrderDate TEXT,
          FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
      );
      ''')

      cursor.execute('''
      CREATE TABLE OrderDetails (
          OrderDetailID INTEGER PRIMARY KEY,
          OrderID INTEGER,
          ProductID INTEGER,
          Quantity INTEGER,
          FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
          FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
      );
      ''')

      cursor.execute('''
      CREATE TABLE Products (
          ProductID INTEGER PRIMARY KEY,
          ProductName TEXT NOT NULL,
          CategoryID INTEGER,
          Price REAL,
          FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
      );
      ''')

      cursor.execute('''
      CREATE TABLE Categories (
          CategoryID INTEGER PRIMARY KEY,
          CategoryName TEXT NOT NULL
      );
      ''')

      # -- 2. Populate Tables with Sample Data --

      cursor.executemany('INSERT INTO Customers (CustomerID, CustomerName, ContactName, Country) VALUES (?, ?, ?, ?)', [
          (1, 'Alfreds Futterkiste', 'Maria Anders', 'Germany'),
          (2, 'Ana Trujillo Emparedados', 'Ana Trujillo', 'Mexico'),
          (3, 'Antonio Moreno Taquería', 'Antonio Moreno', 'Mexico')
      ])

      cursor.executemany('INSERT INTO Categories (CategoryID, CategoryName) VALUES (?, ?)', [
          (1, 'Beverages'),
          (2, 'Condiments')
      ])

      cursor.executemany('INSERT INTO Products (ProductID, ProductName, CategoryID, Price) VALUES (?, ?, ?, ?)', [
          (1, 'Chai', 1, 18.0),
          (2, 'Chang', 1, 19.0),
          (3, 'Aniseed Syrup', 2, 10.0)
      ])

      cursor.executemany('INSERT INTO Orders (OrderID, CustomerID, OrderDate) VALUES (?, ?, ?)', [
          (1, 1, '2023-01-15'),
          (2, 2, '2023-01-17')
      ])

      cursor.executemany('INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity) VALUES (?, ?, ?, ?)', [
          (1, 1, 1, 10),
          (2, 1, 2, 5),
          (3, 2, 3, 7)
      ])

      # Commit changes
      conn.commit()
      print("Database setup complete ✅")

if __name__ == "__main__":
    populate_database()